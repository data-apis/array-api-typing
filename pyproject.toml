[build-system]
build-backend = "setuptools.build_meta"
requires = [ "setuptools" ]

[project]
name = "array-api-typing"
version = "0.0.0"
description = "Static typing support for the array API standard"
readme = "README.md"
license = { text = "MIT" }
authors = [
  { name = "Consortium for Python Data API Standards", email = "data-apis@users.noreply.github.com" },
  { name = "Joren Hammudoglu", email = "jhammudoglu@gmail.com" },
  { name = "Nathaniel Starkman", email = "nstarman@users.noreply.github.com" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Libraries",
  "Typing :: Typed",
]

dependencies = [  ]
optional-dependencies.cli = [
  "rich>=14",
  "typer>=0.16",
]
urls."Bug Tracker" = "https://github.com/data-apis/array-api-typing/issues"
urls.Changelog = "https://github.com/data-apis/array-api-typing/blob/main/CHANGELOG.md"
urls.documentation = "https://array-api-typing.readthedocs.io"
urls.repository = "https://github.com/data-apis/array-api-typing"
scripts.array-api-typing = "array_api_typing.cli:app"

[dependency-groups]
dev = [
  "pytest>=8,<9",
  "pytest-cov>=6,<7",
]
docs = [
  "furo>=2023.5.20; python_version>='3.11'",
  "myst-parser>=0.16; python_version>='3.11'",
  "sphinx>=4; python_version>='3.11'",
  "sphinx-autobuild>=2024,<2025; python_version>='3.11'",
]

[tool.ruff]
line-length = 88
lint.select = [
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "D",   # flake8-docstrings
  "E",   # pycodestyle
  "F",   # pyflake
  "I",   # isort
  "RUF", # ruff specific
  "S",   # flake8-bandit
  "UP",  # pyupgrade
  "W",   # pycodestyle
]
lint.ignore = [
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D107", # Missing docstring in `__init__`
  "D203", # 1 blank line required before class docstring
  "D212", # Multi-line docstring summary should start at the first line
  "D401", # First line of docstring should be in imperative mood
]
lint.per-file-ignores."conftest.py" = [ "D100" ]
lint.per-file-ignores."docs/conf.py" = [ "D100" ]
lint.per-file-ignores."setup.py" = [ "D100" ]
lint.per-file-ignores."tests/**/*" = [
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "S101",
]
lint.isort.known-first-party = [ "array_api_typing", "tests" ]

[tool.pytest.ini_options]
addopts = [
  "-v",
  "-Wdefault",
  "--cov=array_api_typing",
  "--cov-report=term",
  "--cov-report=xml",
  "--showlocals",
  "--strict-config",
  "--strict-markers",
  "-p no:doctest",          # using sybil
  "-ra",
]
pythonpath = [ "src" ]
filterwarnings = [
  "error",
  # Sybil
  "ignore:Attribute s is deprecated and will be removed in Python 3\\.14:DeprecationWarning",
  "ignore:ast\\.Str is deprecated and will be removed in Python 3\\.14:DeprecationWarning",
]
log_cli_level = "INFO"
minversion = "8.3"
xfail_strict = true

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "@overload",
  "if TYPE_CHECKING",
  "raise NotImplementedError",
  'if __name__ == "__main__":',
]

[tool.mypy]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
mypy_path = "src/"
no_implicit_optional = true
show_error_codes = true
warn_unreachable = true
warn_unused_ignores = true
exclude = [
  'docs/.*',
  'setup.py',
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true

[tool.semantic_release]
version_toml = [ "pyproject.toml:project.version" ]
version_variables = [
  "src/array_api_typing/__init__.py:__version__",
  "docs/conf.py:release",
]
build_command = """
pip install uv
uv lock
git add uv.lock
uv build
"""

[tool.semantic_release.changelog]
exclude_commit_patterns = [
  '''chore(?:\([^)]*?\))?: .+''',
  '''ci(?:\([^)]*?\))?: .+''',
  '''refactor(?:\([^)]*?\))?: .+''',
  '''style(?:\([^)]*?\))?: .+''',
  '''test(?:\([^)]*?\))?: .+''',
  '''build\((?!deps\): .+)''',
  '''Merged? .*''',
  '''Initial [Cc]ommit.*''',         # codespell:ignore
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true
